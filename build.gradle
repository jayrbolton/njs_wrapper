/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    // The War plugin extends the Java plugin to add support for assembling web application WAR 
    // files. It disables the default JAR archive generation of the Java plugin 
    // and adds a default WAR archive task
    id 'war'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

//Custom project layout
sourceSets {
    main {
        java {
            srcDirs = ['src/us/kbase/']
        }
        resources {
            srcDirs = ['src/dist']
        }
    }
    test {
        java {
            srcDirs = ["src/us/kbase/narrativejobservice/test"]
        }
    }
}

//Attributes for Jar
jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                   'Main-Class': 'NJSWrapper')
    }
}
//Attributes for War
war {
    //TODO FIX
    //from 'src/rootContent' // adds a file-set to the root of the archive
    //webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    //classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    //classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('war/web.xml') // copies a file to WEB-INF/web.xml
}

//Copy .jar file to ./dist/
task copyJarToDist(type: Copy) {
    from jar
    into 'dist'
}
//Copy .war file to ./dist/
task copyWarToDist(type: Copy) {
    from war
    into 'dist'
}
//Clean Build directory 
task cleanup(type: Delete) {
    delete buildDir,'dist'
}

task buildJar(type: GradleBuild) {
     tasks = ['cleanup', 'jar', 'copyJarToDist']
}
task buildWar(type: GradleBuild) {
     tasks = ['cleanup', 'war', 'copyWarToDist']
}
task buildAll(type: GradleBuild) {
     tasks = ['cleanup', 'jar','war', 'copyJarToDist','copyWarToDist']
}

// task buildJar (dependsOn: [cleanBuildDir, jar, copyJarToDist])  
// task buildWar (dependsOn: [cleanBuildDir, war, copyWarToDist]) 
// task buildNJS (dependsOn: [cleanBuildDir, jar, war, copyJarToDist, copyWarToDist]) 

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

task hotSwap(type:Exec){
    commandLine "./dev_tools/simple_mini_kb_deploy.sh"
}

dependencies {
    // TODO: Change
    // Flattened requirements from kbasejars in an adjacent directory
    compile fileTree(dir: 'flatjars', include: ['*.jar'])

}
compileJava   {
  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'
}

/* GRADLE COMMANDS
* gradle build
* gradle javadoc
*/


//TODO GET JAVADOC WORKING
//TODO GET SCRIPT_DOCKER WORKING
//TODO GET DOCKER WORKING
//TODO GET MAKEFILE WORKING WITH GRADLE